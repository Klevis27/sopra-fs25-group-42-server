name: Deploy Project to App Engine

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    name: Test and SonarQube Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Install Java 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Run Tests
        run: ./gradlew clean test jacocoTestReport

      - name: Run SonarCloud Analysis
        run: ./gradlew sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    name: Deploy to Google App Engine
    runs-on: ubuntu-latest
    # needs: test  # Ensure tests pass before deployment

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set short version name
        id: version
        run: echo "version=v-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Deploy to App Engine
        id: deploy
        uses: google-github-actions/deploy-appengine@v0.2.0
        with:
          deliverables: .
          version: ${{ steps.version.outputs.version }}  # You can use dynamic versioning if needed
          credentials: ${{ secrets.GCP_SERVICE_CREDENTIALS }}
          project_id: 'sopra-fs25-group-42-server'

      - name: Verify deployment
        run: |
          curl "${{ steps.deploy.outputs.url }}"

  deploy-yjs:
    name: Build & Deploy Yjs WebSocket Server
    runs-on: ubuntu-latest
    needs: deploy    # wait for your App Engine deploy if you like

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_CREDENTIALS }}

      - name: Install gcloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: Build & Push Docker image
        run: |
          gcloud builds submit yjs-redis-server \
            --tag gcr.io/${{ secrets.GCP_PROJECT }}/yjs-server

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy yjs-server \
            --image gcr.io/${{ secrets.GCP_PROJECT }}/yjs-server \
            --platform managed \
            --region europe-west1 \
            --allow-unauthenticated \
            --port 1234 \
            --set-env-vars REDIS_HOST=redis,REDIS_PORT=6379,REDIS_PASSWORD=devpass
